{"mappings":";AAGA,8BAI+B,SAAQ,YAAY;IAExC,IAAI,EAAE,MAAM,CAAM;CAC5B;AAeD,uBAKwB,SAAQ,YAAY;IAE/B,YAAY,SAAM;IAE3B,iBAAiB;IASjB,WAAW;IAMX,qBAAqB;CAcxB;AAED,QAAQ,MAAM,CAAC;IACb,UAAU,WAAW;QACjB,aAAa,EAAE,UAAU,CAAC;QAC1B,qBAAqB,EAAE,iBAAiB,CAAC;KAC5C;CACF","sources":["src/src/index.ts","src/index.ts"],"sourcesContent":[null,"import { WebComponent, html, css, customElement, state } from \"@lithium-framework/core\";\n\n// Chaque élément correspond à une vue spécifique, identifiable via l'attribut `path`.\n@customElement({\n  name: 'hash-router-element',\n  template: html`<slot></slot>` // Affiche son contenu via un slot\n})\nexport class HashRouterElement extends WebComponent {\n  // Attribut 'path' qui spécifie à quelle route cet élément est associé\n  @state() path: string = \"\";\n}\n\n// Template pour `hash-router`\nconst routerTemplate = html<HashRouter>`\n    <slot></slot>\n`;\n\n// Styles pour `hash-router` (optionnel)\nconst routerStyles = css`\n    :host {\n        display: block;\n    }\n`;\n\n// Définition de `hash-router`\n@customElement({\n    name: 'hash-router',\n    template: routerTemplate,\n    styles: routerStyles\n})\nexport class HashRouter extends WebComponent {\n\n    @state() currentRoute = \"\"; // La route actuelle\n\n    connectedCallback() {\n        super.connectedCallback();\n        // Initialiser la route courante\n        this.updateRoute();\n        // Écouter les changements de hash\n        window.addEventListener('hashchange', () => this.updateRoute());\n    }\n\n    // Fonction qui met à jour la route en fonction du hash de l'URL\n    updateRoute() {\n        this.currentRoute = window.location.hash || \"#\";\n        this.updateVisibleElements();\n    }\n\n    // Fonction qui gère l'affichage des éléments en fonction de la route\n    updateVisibleElements() {\n        const children = Array.from(this.children) as HTMLElement[];\n\n        children.forEach((child: any) => {\n            // Rejeter tout enfant qui n'est pas un `hash-router-element`\n            if (!(child instanceof HashRouterElement)) {\n                console.warn(`Element non valide dans hash-router: `, child);\n                return;\n            }\n\n            // Afficher ou masquer les `hash-router-element` en fonction de la route\n            child.style.display = child.path === this.currentRoute ? 'block' : 'none';\n        });\n    }\n}\n\ndeclare global {\n  interface NamedTagMap {\n      'hash-router': HashRouter;\n      'hash-router-element': HashRouterElement;\n  }\n}"],"names":[],"version":3,"file":"types.d.ts.map"}