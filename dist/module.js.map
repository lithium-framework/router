{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["import { WebComponent, html, css, customElement, attr, state, render } from \"@lithium-framework/core\";\n\nlet routeParams: { [key: string]: string } = {};\n\n// Fonction pour accéder aux paramètres de la route\nexport function useParams() {\n  return routeParams;\n}\n\n@customElement({\n  name: 'hash-router-element',\n  template: html`<slot></slot>`,\n  styles : [\n    css`\n      :host{\n        display : block;\n      }\n    `\n  ]\n})\nexport class HashRouterElement extends WebComponent {\n  @attr() path: string = \"\";\n  @state() element: any = null;\n  @state() params: { [key: string]: string } = {};  // Nouvel état pour stocker les paramètres\n\n  setElement(template: any) {\n    this.element = template;\n  }\n\n  // Méthode appelée avec les paramètres lorsque la route devient active\n  activate(params: { [key: string]: string } = {}) {\n    this.params = params;\n\n    this.innerHTML = \"\"; // Vider le contenu précédent\n    if (this.element) {\n      render(this.element, this);\n    }\n    this.style.display = 'block';\n  }\n\n  deactivate() {\n    this.style.display = 'none';\n  }\n}\n\nconst routerTemplate = html<HashRouter>`\n  <slot></slot>\n`;\n\nconst routerStyles = css`\n  :host{\n    display : block;\n  }\n`;\n\n@customElement({\n  name: 'hash-router',\n  template: routerTemplate,\n  styles: routerStyles\n})\nexport class HashRouter extends WebComponent {\n  @state() currentRoute = \"\";\n\n  connectedCallback() {\n    super.connectedCallback();\n    this.updateRoute();\n    window.addEventListener('hashchange', () => this.updateRoute());\n  }\n\n  updateRoute() {\n    this.currentRoute = window.location.hash.replace('#' , '') || \"/\";\n\n    this.updateVisibleElements();\n  }\n\n  // Fonction pour vérifier si le path correspond à la route actuelle et extraire les paramètres\n  matchRoute(path: string, route: string): { matched: boolean; params: { [key: string]: string } } {\n\n    console.log( { operationId : \"matchRoute\" , path , route } )\n\n    const routeSegments = route.split('/');\n    const pathSegments = path.replace('/#' , '').split('/');\n    const params: { [key: string]: string } = {};\n\n    // Vérifier si le nombre de segments est différent\n    if (routeSegments.length !== pathSegments.length) {\n        return { matched: false, params: {} };\n    }\n\n    // Parcourir chaque segment pour vérifier le match\n    for (let i = 0; i < routeSegments.length; i++) {\n        if (routeSegments[i].startsWith(\":\")) {\n            // Si le segment de chemin commence par ':', on l'interprète comme un paramètre\n            const paramName = routeSegments[i].slice(1); // Supprimer ':' pour obtenir le nom du paramètre\n            params[paramName] = pathSegments[i];       // Associer la valeur au paramètre\n        } else if (pathSegments[i] !== routeSegments[i]) {\n            // Si les segments ne correspondent pas exactement et que ce n'est pas un paramètre, le match échoue\n            console.log( \"wrong segment\" , { 1 : pathSegments[i] , 2 : routeSegments[i] })\n            return { matched: false, params: {} };\n        }\n    }\n\n    console.log({ matched: true, params })\n\n    return { matched: true, params }; // Retourner le match et les paramètres extraits\n  }\n\n  // Mettre à jour l'affichage en fonction de la route et des paramètres\n  updateVisibleElements() {\n    const children = Array.from(this.children) as HashRouterElement[];\n    let matchedRoute = false;\n\n    children.forEach((child) => {\n      if (child instanceof HashRouterElement) {\n        const { matched, params } = this.matchRoute(this.currentRoute, child.path.replace('#' , '') );\n        if (matched) {\n          child.activate(params);\n          routeParams = params;  // Met à jour les paramètres dans la variable globale\n          matchedRoute = true;\n        } else {\n          child.deactivate();\n        }\n      }\n    });\n\n    if (!matchedRoute) {\n      routeParams = {};  // Nettoie la variable globale si aucune route n'est trouvée\n    }\n  }\n}\n\ndeclare global {\n  interface NamedTagMap {\n    'hash-router': HashRouter;\n    'hash-router-element': HashRouterElement;\n  }\n}"],"names":[],"version":3,"file":"module.js.map","sourceRoot":"../"}